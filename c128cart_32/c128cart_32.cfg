SYMBOLS {
    __STACKSIZE__: value = $0800, type = weak;
}

MEMORY {
    ZP:       start = $0002, size = $001A, type = rw, define = yes;

    # Split 32K ROM into two banks (avoid MMU registers at $FF00â€“$FF04)
    ROMLO:    start = $8000, size = $4000, file = %O, fill = yes, define = yes;
    ROMHI:    start = $C000, size = $3F00, file = %O, fill = yes, define = yes;

    # Final padding to make the image exactly 32KB
    PADTOP:   start = $FF00, size = $0100, file = %O, fill = yes;

    RAM:      start = $1C00, size = $6400, type = rw, define = yes;
}

SEGMENTS {
    STARTUP:  load = ROMLO, type = ro, start = $8000;

    LOWCODE:  load = ROMLO, type = ro, optional = yes;
    INIT:     load = ROMLO, type = ro, define = yes, optional = yes;
    CODE:     load = ROMLO, type = ro;
    RODATA:   load = ROMLO, type = ro;

    DATA:     load = ROMLO, run = RAM, type = rw, define = yes;
    ONCE:     load = ROMLO, type = ro, define = yes, optional = yes;

    # Optional extra ROM segments for the upper 16KB (can shift rodata here)
    HICODE:   load = ROMHI, type = ro, optional = yes;
    HIRODATA: load = ROMHI, type = ro, optional = yes;

    BSS:      load = RAM, type = bss, define = yes;
    HEAP:     load = RAM, type = bss, optional = yes;
    ZEROPAGE: load = ZP,  type = zp;

    # Fills to the end of each ROM section
    PADLO:    load = ROMLO, type = ro, start = $BFFF;
    PADHI:    load = ROMHI, type = ro, start = $FEFF;

    # New top-of-ROM padding to safely fill final 256 bytes
    PADTOP:   load = PADTOP, type = ro, start = $FF00;
}

FEATURES {
    CONDES: segment = INIT,
            type = constructor,
            label = __CONSTRUCTOR_TABLE__,
            count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
            type = destructor,
            label = __DESTRUCTOR_TABLE__,
            count = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
            type = interruptor,
            label = __INTERRUPTOR_TABLE__,
            count = __INTERRUPTOR_COUNT__;
}
