SYMBOLS {
    __STACKSIZE__: value = $0800, type = weak;  # 2K stack
}

MEMORY {
    ZP:       start = $0002, size = $001A, type = rw, define = yes;

    # 32KB cartridge space: $8000 - $FFFF
    ROM:      start = $8000, size = $8000, file = %O, fill = yes, define = yes;

    RAM:      start = $1C00, size = $6400, type = rw, define = yes;

    HIRAM:    start = $C000, size = $1000 - __STACKSIZE__, type = rw;
}

SEGMENTS {
    STARTUP:  load = ROM, type = ro, start = $8000;

    LOWCODE:  load = ROM, type = ro, optional = yes;
    INIT:     load = ROM, type = ro, define = yes, optional = yes;
    CODE:     load = ROM, type = ro;
    RODATA:   load = ROM, type = ro;

    DATA:     load = ROM, run = RAM, type = rw, define = yes;
    ONCE:     load = ROM, type = ro, define = yes, optional = yes;
    BSS:      load = RAM, type = bss, define = yes;
    HEAP:     load = RAM, type = bss, optional = yes;

    ZEROPAGE: load = ZP, type = zp;

    PADEND:   load = ROM, type = ro, start = $FFFF;
}

FEATURES {
    CONDES: segment = INIT,
            type = constructor,
            label = __CONSTRUCTOR_TABLE__,
            count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
            type = destructor,
            label = __DESTRUCTOR_TABLE__,
            count = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
            type = interruptor,
            label = __INTERRUPTOR_TABLE__,
            count = __INTERRUPTOR_COUNT__;
}
