# C128 16K Cartridge Configuration

SYMBOLS {
    __STACKSIZE__: value = $0800, type = weak; # 2k stack
}

MEMORY {
    # Zero page - minimal allocation to avoid system areas
    ZP:       start = $0002, size = $001A, type = rw, define = yes;
    
    # C128 16K cartridge ROM area (MID bank)
    # Must start at $8000 for proper cartridge recognition
    ROM:      start = $8000, size = $4000, file = %O, fill = yes, define = yes;
    
    # Main RAM area - starting after BASIC program area
    # $1C00 is safe as it's after BASIC's start ($1C01)
    RAM:      start = $1C00, size = $6400, type = rw, define = yes;
    
    # High RAM (below I/O area at $D000)
    # Stack goes here, not in main RAM
    HIRAM:    start = $C000, size = $1000 - __STACKSIZE__, type = rw;
}

SEGMENTS {
    # Cartridge header and startup code - MUST be at start of ROM ($8000)
    STARTUP:  load = ROM, type = ro, start = $8000;
    
    # Code segments in cartridge ROM
    LOWCODE:  load = ROM, type = ro, optional = yes;
    INIT:     load = ROM, type = ro, define = yes, optional = yes;
    CODE:     load = ROM, type = ro;
    RODATA:   load = ROM, type = ro;
    
    # Data segment - loaded from ROM but runs in RAM
    DATA:     load = ROM, run = RAM, type = rw, define = yes;
    
    # Once segment for one-time initialization code
    ONCE:     load = ROM, type = ro, define = yes, optional = yes;
    
    # RAM-only segments
    BSS:      load = RAM, type = bss, define = yes;
    HEAP:     load = RAM, type = bss, optional = yes;
    
    # High RAM segments (optional)
    BSSHI:    load = HIRAM, type = bss, define = yes, optional = yes;
    
    # Zero page
    ZEROPAGE: load = ZP, type = zp;
    
    # Padding to fill cartridge to exactly 16K
    CARTID:   load = ROM, type = ro, start = $BFF9;
    PADEND:   load = ROM, type = ro, start = $BFFF;
}

FEATURES {
    CONDES: segment = INIT,
            type = constructor,
            label = __CONSTRUCTOR_TABLE__,
            count = __CONSTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
            type = destructor,
            label = __DESTRUCTOR_TABLE__,
            count = __DESTRUCTOR_COUNT__;
    CONDES: segment = RODATA,
            type = interruptor,
            label = __INTERRUPTOR_TABLE__,
            count = __INTERRUPTOR_COUNT__,
            import = __CALLIRQ__;
}
